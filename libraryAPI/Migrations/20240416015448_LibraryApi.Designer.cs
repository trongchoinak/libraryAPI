// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using libraryAPI.Data;

#nullable disable

namespace libraryAPI.Migrations
{
    [DbContext(typeof(libraryAPIDbcontext))]
    [Migration("20240416015448_LibraryApi")]
    partial class LibraryApi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("libraryAPI.Models.Authors", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("libraryAPI.Models.Books", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<bool>("Isread")
                        .HasColumnType("bit");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("publishersId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.HasIndex("publishersId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("libraryAPI.Models.Books_Authors", b =>
                {
                    b.Property<int>("Books_AuthorsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Books_AuthorsID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("authorsAuthorID")
                        .HasColumnType("int");

                    b.Property<int>("booksBookID")
                        .HasColumnType("int");

                    b.HasKey("Books_AuthorsID");

                    b.HasIndex("authorsAuthorID");

                    b.HasIndex("booksBookID");

                    b.ToTable("Books_Authors");
                });

            modelBuilder.Entity("libraryAPI.Models.publishers", b =>
                {
                    b.Property<int>("publishersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("publishersId"));

                    b.Property<string>("publishersName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("publishersId");

                    b.ToTable("publishers");
                });

            modelBuilder.Entity("libraryAPI.Models.Books", b =>
                {
                    b.HasOne("libraryAPI.Models.publishers", "publishers")
                        .WithMany("books")
                        .HasForeignKey("publishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("publishers");
                });

            modelBuilder.Entity("libraryAPI.Models.Books_Authors", b =>
                {
                    b.HasOne("libraryAPI.Models.Authors", "authors")
                        .WithMany("books_Authors")
                        .HasForeignKey("authorsAuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryAPI.Models.Books", "books")
                        .WithMany("books_Authors")
                        .HasForeignKey("booksBookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authors");

                    b.Navigation("books");
                });

            modelBuilder.Entity("libraryAPI.Models.Authors", b =>
                {
                    b.Navigation("books_Authors");
                });

            modelBuilder.Entity("libraryAPI.Models.Books", b =>
                {
                    b.Navigation("books_Authors");
                });

            modelBuilder.Entity("libraryAPI.Models.publishers", b =>
                {
                    b.Navigation("books");
                });
#pragma warning restore 612, 618
        }
    }
}
