// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using libraryAPI.Data;

#nullable disable

namespace libraryAPI.Migrations
{
    [DbContext(typeof(libraryAPIDbcontext))]
    [Migration("20240507013024_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("libraryAPI.Models.Domain.Authors", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorID = 1,
                            Fullname = "Nguyễn Văn A"
                        },
                        new
                        {
                            AuthorID = 2,
                            Fullname = "Trần Thị B"
                        },
                        new
                        {
                            AuthorID = 3,
                            Fullname = "Phạm Văn C"
                        });
                });

            modelBuilder.Entity("libraryAPI.Models.Domain.Books", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Isread")
                        .HasColumnType("bit");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("publishersId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.HasIndex("publishersId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            CoverUrl = "url_sach_1.jpg",
                            DateAdded = new DateTime(2024, 5, 7, 8, 30, 22, 630, DateTimeKind.Local).AddTicks(568),
                            DateRead = new DateTime(2024, 5, 7, 8, 30, 22, 630, DateTimeKind.Local).AddTicks(551),
                            Genre = "Thể loại 1",
                            Isread = true,
                            Rate = 5,
                            description = "Mô tả sách 1",
                            publishersId = 1,
                            title = "Sách 1"
                        },
                        new
                        {
                            BookID = 2,
                            CoverUrl = "url_sach_2.jpg",
                            DateAdded = new DateTime(2024, 5, 7, 8, 30, 22, 630, DateTimeKind.Local).AddTicks(571),
                            Genre = "Thể loại 2",
                            Isread = false,
                            Rate = 4,
                            description = "Mô tả sách 2",
                            publishersId = 2,
                            title = "Sách 2"
                        });
                });

            modelBuilder.Entity("libraryAPI.Models.Domain.Books_Authors", b =>
                {
                    b.Property<int>("Books_AuthorsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Books_AuthorsID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.HasKey("Books_AuthorsID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BookID");

                    b.ToTable("books_Authors");

                    b.HasData(
                        new
                        {
                            Books_AuthorsID = 1,
                            AuthorID = 1,
                            BookID = 1
                        },
                        new
                        {
                            Books_AuthorsID = 2,
                            AuthorID = 2,
                            BookID = 1
                        },
                        new
                        {
                            Books_AuthorsID = 3,
                            AuthorID = 3,
                            BookID = 2
                        });
                });

            modelBuilder.Entity("libraryAPI.Models.Domain.publishers", b =>
                {
                    b.Property<int>("publishersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("publishersId"));

                    b.Property<string>("publishersName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("publishersId");

                    b.ToTable("publishers");

                    b.HasData(
                        new
                        {
                            publishersId = 1,
                            publishersName = "Nhà xuất bản A"
                        },
                        new
                        {
                            publishersId = 2,
                            publishersName = "Nhà xuất bản B"
                        });
                });

            modelBuilder.Entity("libraryAPI.Models.Domain.Books", b =>
                {
                    b.HasOne("libraryAPI.Models.Domain.publishers", "publishers")
                        .WithMany("books")
                        .HasForeignKey("publishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("publishers");
                });

            modelBuilder.Entity("libraryAPI.Models.Domain.Books_Authors", b =>
                {
                    b.HasOne("libraryAPI.Models.Domain.Authors", "authors")
                        .WithMany("books_Authors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libraryAPI.Models.Domain.Books", "books")
                        .WithMany("books_Authors")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authors");

                    b.Navigation("books");
                });

            modelBuilder.Entity("libraryAPI.Models.Domain.Authors", b =>
                {
                    b.Navigation("books_Authors");
                });

            modelBuilder.Entity("libraryAPI.Models.Domain.Books", b =>
                {
                    b.Navigation("books_Authors");
                });

            modelBuilder.Entity("libraryAPI.Models.Domain.publishers", b =>
                {
                    b.Navigation("books");
                });
#pragma warning restore 612, 618
        }
    }
}
